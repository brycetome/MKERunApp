<style>
    .remove-padding .mud-input-root.mud-input-root-filled.mud-input-root-adorned-end.mud-input-root-margin-dense.mud-select-input {
        padding-top: 6px !important;
    }
    
    @($"#adornment-{newUuid} .mud-input-adornment svg path {"{"} color: {ActivityType.Color} !important;{"}"}")
</style>

<div id="@($"adornment-{newUuid}")">
   <MudSelect T="ActivityType"
           Value=ActivityType
           ValueChanged="(act) => ActivityChanged(act)"
           Dense
           Margin="Margin.Dense"
           AdornmentIcon="@ActivityType?.Icon"
           Label=@(ShowLabel ? "Activity Type" : null)
           DisableUnderLine
           Variant="Variant.Filled"
           AdornmentColor="Color.Surface"
           Class="@((ShowLabel ? "" : "remove-padding"))">
    @foreach (var ActivityTypeOption in ActivityType.GetActivityTypes())
    {
        <MudSelectItem Value="ActivityTypeOption" Icon="@ActivityTypeOption.Icon">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="0" Justify="Justify.SpaceBetween">
                <MudText>@ActivityTypeOption.Name</MudText>
                <style>
                    @($" .mud-list-item #selector-{ActivityTypeOption.Type} {{ color: {ActivityTypeOption.Color} !important;{"}"}")
                </style>
                <MudIcon Icon="@ActivityTypeOption.Icon" id="@($"selector-{ActivityTypeOption.Type}")" />
            </MudStack>
        </MudSelectItem>
    }
</MudSelect> 
</div>


@code {
    [Parameter]
    public ActivityType ActivityType { get; set; } = ActivityType.GetActivityType(ActivityType.WorkoutType.Run);
    [Parameter] public EventCallback<ActivityType?> ActivityTypeChanged { get; set; }
    [Parameter] public bool ShowLabel { get; set; } = true;

    private MudSelect<ActivityType>? select;
    Guid newUuid = Guid.NewGuid();

    private async Task ActivityChanged(ActivityType activityType)
    {
        await ActivityTypeChanged.InvokeAsync(activityType);
        StateHasChanged();
    }
}
