@inject IDbContextFactory<ApplicationDbContext> factory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

@if (!string.IsNullOrEmpty(Description))
{
    <MudTextField Value="@Description"
                  Label="Description"
                  ReadOnly
                  Disabled
                  AutoGrow
                  DisableUnderLine
                  Variant="Variant.Filled"
                  Margin=Margin.Dense />
}
@if (IsWorkOut)
{
    <MudTextField Value="@Recovery"
                  Label="Recovery"
                  ReadOnly
                  AutoGrow
                  Disabled
                  DisableUnderLine
                  Variant="Variant.Filled"
                  Margin=Margin.Dense />
    if (!UseUIWorkOut)
    {
        <MudTextField @bind-Value="WorkoutSpecs"
                      Label="Workout Specs"
                      ReadOnly
                      Disabled
                      AutoGrow
                      DisableUnderLine
                      Variant="Variant.Filled"
                      Margin=Margin.Dense />
    }
    else
    {
        <MudField Variant="Variant.Filled"
                  Margin="Margin.Dense"
                  DisableUnderLine
                  Label="Workout Specs">
            <MudStack Spacing="1" Class="pt-2">
                @foreach (var workItem in WorkoutItems.OrderBy(item => item.Order))
                {
                    var workItemType = ActivityType.GetActivityType(workItem.WorkoutType);
                    var distanceString = workItem.Distance is null ? "" : $" / {workItem.Distance} {workItem.DistanceMeasurment}";
                    <MudStack Row AlignItems="AlignItems.Center">
                        <MudTooltip Text="@workItemType.Name">
                            <MudIcon Size="Size.Small" Icon="@workItemType.Icon" />
                        </MudTooltip>
                        <MudText>@($"{workItem.Time}{distanceString}")</MudText>
                    </MudStack>
                }
            </MudStack>
        </MudField>
    }
}
@if (Report != null && !HideReport)
{
    <MudTextField @bind-Value="ReportNotes"
                  Label="My Splits & Notes"
                  AutoGrow
                  DisableUnderLine
                  Immediate
                  Variant="Variant.Filled"
                  Margin=Margin.Dense
                  Adornment="@(Report.Notes == ReportNotes ? Adornment.None : Adornment.End)"
                  AdornmentIcon="@Icons.Material.Filled.Save"
                  AdornmentColor="Color.Primary"
                  OnAdornmentClick="ClickSubmit" />

@*     <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.FlexEnd Spacing="0">
        <MudIconButton Color="Color.Primary"
                       Class="bottom-activity-buttons"
                       Icon="@Icons.Material.Filled.Save"
                       Edge="Edge.Start"
                       DisableRipple
                       DisableElevation
                       OnClick="ClickSubmit" />
    </MudStack> *@
}

@code {
    [Parameter] public string? Description { get; set; }
    [Parameter] public string Recovery { get; set; } = "";
    [Parameter] public bool IsWorkOut { get; set; }
    [Parameter] public bool UseUIWorkOut { get; set; }
    [Parameter] public string WorkoutSpecs { get; set; } = "";
    [Parameter] public int ActivityId { get; set; }
    [Parameter] public bool HideReport { get; set; }
    [Parameter] public IEnumerable<WorkoutItem> WorkoutItems { get; set; } = [];

    private string ReportNotes = "";
    private AthleteActivityReport? Report;
    private bool newReport;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            using var ctx = factory.CreateDbContext();
            var user = await factory.LoadUser(UserManager, AuthenticationStateProvider) ?? throw new NullReferenceException();
            Report = await ctx.Reports.FirstOrDefaultAsync(r => r.ActivityId == ActivityId && r.UserId == user.Id);
            if (Report == null)
            {
                newReport = true;
                Report = new()
                    {
                        User = user,
                        UserId = user.Id,
                        ActivityId = ActivityId
                    };
            }
            ReportNotes = Report.Notes;
        }
        catch
        {
            Snackbar.Add("Failed to load athlete notes", Severity.Error);
        }
    }

    private async Task ClickSubmit()
    {
        try
        {
            if (Report == null)
                return;
            using var ctx = factory.CreateDbContext();
            Report.Notes = ReportNotes;
            ctx.Entry(Report).State = EntityState.Modified;
            if(newReport)
                ctx.Entry(Report).State = EntityState.Added;
            await ctx.SaveChangesAsync();
            await ctx.DisposeAsync();
            Snackbar.Add("Updated your notes", Severity.Success);
            newReport = false;
        }
        catch
        {
            Snackbar.Add("Failed to save your notes", Severity.Error);
        }

    }
}
