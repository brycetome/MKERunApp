@using static Models.ActivityType;

<style>
    .remove-padding .mud-input-slot.mud-input-root.mud-input-root-filled.mud-input-root-margin-dense {
        padding-top: 6px !important;
    }


    .reduce-padding-mini-btns {
        padding: 4px;
    }

    .pop-over-class {
        background: none;
        box-shadow: none;
    }
</style>

<MudMenu ActivationEvent="@MouseEvent.MouseOver"
         DisableElevation
         AnchorOrigin="Origin.CenterCenter"
         TransformOrigin="Origin.CenterLeft"
         PopoverClass="pop-over-class"
         Class="py-2"
         Style="width:100%;cursor:grab">
    <ActivatorContent>
        <MudPaper Class="pa-1" Width="100%" Elevation="0" Style="cursor:grab">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Spacing="0" Style="width:100%;cursor:grab">
                <MudIcon Icon="@Icons.Material.Filled.DragIndicator" Style="cursor:grab" />
                <div style="width:175px;">
                    <ActivitySelector ActivityType=activityType
                                      ActivityTypeChanged="WorkOutTypeChaned"
                                      ShowLabel=false />
                </div>

                <MudSpacer />
                <div style="width:100px;z-index:3000">
                    <MudNumericField Value=_value
                                     ValueChanged="ValueChaned"
                                     T="int"
                                     Min="0"
                                     HideSpinButtons
                                     Margin="Margin.Dense"
                                     Variant="Variant.Filled"
                                     Class="remove-padding"
                                     Adornment="Adornment.End"
                                     AdornmentText="@_measurement"
                                     DisableUnderLine />
                </div>
            </MudStack>
        </MudPaper>
    </ActivatorContent>
    <ChildContent>
        <MudIconButton OnClick="OnDelete"
                       Icon="@Icons.Material.Outlined.Delete"
                       Size="Size.Small"
                       Color="Color.Secondary"
                       Class="reduce-padding-mini-btns" />
        <MudIconButton OnClick=SetNextValue
                       Icon="@Icons.Material.Filled.Straighten"
                       Size="Size.Small"
                       Class="reduce-padding-mini-btns" />

    </ChildContent>
</MudMenu>

@code {
    [Parameter] public Action OnDelete { get; set; } = () => { };

    [Parameter] public int Value { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }

    [Parameter] public string Measurement { get; set; } = "min";
    [Parameter] public EventCallback<string> MeasurementChanged { get; set; }


    [Parameter] public WorkoutType ActivityType { get; set; }
    [Parameter] public EventCallback<WorkoutType> ActivityTypeChanged { get; set; }

    private ActivityType activityType = GetActivityType(WorkoutType.Run);

    private IEnumerator<string>? AdornmentOptionsIterator;
    private List<string> AdornmentOptions = ["min", "mi", "km", "m", "s"];
    private string _measurement = "min";
    private int _value;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InitializeIterator();
        AdornmentOptionsIterator?.MoveNext();
        var nextMeasurement = AdornmentOptionsIterator?.Current;
        while (nextMeasurement != Measurement && (AdornmentOptionsIterator?.MoveNext() ?? false))
        {
            AdornmentOptionsIterator?.MoveNext();
            nextMeasurement = AdornmentOptionsIterator?.Current;
        }
        _measurement = Measurement;
        _value = Value;
        activityType = GetActivityType(ActivityType);
    }

    private async Task ValueChaned(int value)
    {
        _value = value;
        await ValueChanged.InvokeAsync(value);
    }

    private async Task WorkOutTypeChaned(ActivityType activityType)
    {
        await ActivityTypeChanged.InvokeAsync(activityType.Type);
        this.activityType = activityType;
    }

    private async Task SetNextValue()
    {
        if (AdornmentOptionsIterator is null) return;
        if (!AdornmentOptionsIterator.MoveNext())
        {
            InitializeIterator();
            AdornmentOptionsIterator.MoveNext();
        }
        _measurement = AdornmentOptionsIterator.Current;
        await MeasurementChanged.InvokeAsync(AdornmentOptionsIterator.Current);
    }

    private void InitializeIterator()
    {
        AdornmentOptionsIterator = AdornmentOptions.GetEnumerator();
    }
}
