@inject ISnackbar Snackbar
@inject IDbContextFactory<ApplicationDbContext> factory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudStack Row AlignItems="AlignItems.Center" Spacing="1">
    <MudSelect T="Team"
               Dense
               Margin="Margin.Dense"
               Variant="Variant.Outlined"
               Placeholder="Select Team"
               ValueChanged="SelectedTeamChanged">
        @foreach (Team team in Teams)
        {
            <MudSelectItem Value="team" />
        }
    </MudSelect>

    <div style="display:inline-block">
        <MudFab StartIcon="@Icons.Material.Filled.Add"
                DisableElevation
                Size="Size.Small"
                Color="Color.Tertiary"
                OnClick="PressNew"
                UserAttributes="@(new() {{"id", "new-button"}})" />

        <MudPopover AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Open=OpenNewTeamForm Fixed>
            <MudPaper Class="pa-2">
                <TeamForm @bind-Show=OpenNewTeamForm @bind-Teams=Teams />
            </MudPaper>
        </MudPopover>
    </div>
</MudStack>

@code {
    [Parameter] public EventCallback<Team?> SelectedTeamChanged { get; set; }

    private List<Team> Teams = [];
    private bool OpenNewTeamForm;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Teams = (await factory.LoadUser(UserManager, AuthenticationStateProvider)).CoachedTeams;
        }
        catch
        {
            Snackbar.Add("Failed to load the User.", Severity.Error);
        }
        StateHasChanged();
    }


    private void PressNew()
    {
        OpenNewTeamForm = !OpenNewTeamForm;
    }

    private void TeamChanged(Team team)
    {
        SelectedTeamChanged.InvokeAsync(team);
    }
}
