@inject ISnackbar Snackbar
@inject IDbContextFactory<ApplicationDbContext> factory

<MudStack Spacing="4">
    <MudGrid>
        <MudItem xs="12" sm="6" md="6">
            <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                <MudTextField @bind-Value=NewGroupName
                              Margin=Margin.Dense
                              Variant="Variant.Outlined"
                              Placeholder="Group Name" />
                <MudButton Variant="Variant.Filled"
                           Color="Color.Tertiary"
                           OnClick="CreateNewGroup">
                    Create
                </MudButton>
            </MudStack>
        </MudItem>

        <MudItem xs="12" sm="6" md="6" Class="d-flex justify-center align-center">
            <InviteAthleteToTeam TeamId="TeamId" />
        </MudItem>
    </MudGrid>


    <MudDropContainer @ref=_container
                      T="AthleteGroupDropItem"
                      Items="DropItems"
                      ItemsSelector="((item, dropZone) => item.Identifier == dropZone)"
                      ItemDropped="ItemUpdated">
        <ChildContent>
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="0">
                        <MudText>Unassigned Athletes</MudText>
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Refresh"
                                       Color="Color.Primary"
                                       OnClick="RefreshAthletes" />
                    </MudStack>
                    <MudDropZone T="AthleteGroupDropItem"
                                 Identifier="@AthleteGroupDropItem.UnassignedGroup"
                                 Class="rounded-lg mud-alert-text-normal pl-3 pb-4 pt-2 flex-grow-1 d-flex flex-wrap"
                                 AllowReorder />
                </MudItem>


                @foreach (var group in _Groups)
                {
                    <MudItem xs="12" md="3">
                        <MudDropZone T="AthleteGroupDropItem"
                                     Identifier="@group.Id.ToString()"
                                     OnlyZone>
                            <MudExpansionPanels Square=false>
                                <MudExpansionPanel DisableGutters Dense Class="mud-background-gray" IsInitiallyExpanded>
                                    <TitleContent>
                                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                            <MudText>@group.Name</MudText>
                                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Primary" />
                                        </MudStack>
                                    </TitleContent>
                                    <ChildContent>
                                        @* Duplicate drop zones is a bit of hack to smooth out dropping into panel headers *@
                                        <MudDropZone T="AthleteGroupDropItem" Identifier="@group.Id.ToString()" Class="rounded mud-background-gray pl-3 pb-8 pr-3 flex-grow-1" />
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        </MudDropZone>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
        <ItemRenderer>
            <MudPaper Class="pa-2" Style="z-indez:2000;">
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                    <MudText>@context.Name</MudText>
                    <MudIcon Icon="@Icons.Material.Filled.DragIndicator" />
                </MudStack>
            </MudPaper>
        </ItemRenderer>
    </MudDropContainer>
</MudStack>


<style>
    .mud-expand-panel .mud-expand-panel-header {
        padding: 2px 10px;
    }

    .mud-expand-panel {
        border-radius: 12px;
    }
</style>

@code {
    [Parameter] public int TeamId { get; set; }
    [Parameter] public List<TeamAthlete> Athletes { get; set; } = [];
    [Parameter] public List<TeamGroup> Groups { get; set; } = [];
    [Parameter] public EventCallback<List<TeamGroup>> GroupsChanged { get; set; }

    private List<TeamGroup> _Groups = [];
    private List<AthleteGroupDropItem> DropItems = [];
    private string NewGroupName = "";
    private MudDropContainer<AthleteGroupDropItem> _container;

    protected override void OnInitialized()
    {
        _Groups = Groups.ToList();
        DropItems = Athletes.Select(ath => new AthleteGroupDropItem(ath, factory)).ToList();
    }

    private async Task CreateNewGroup()
    {
        try
        {
            var newGroup = await factory.CreateGroupInTeam(NewGroupName, TeamId);
            _Groups.Add(newGroup);
            await GroupsChanged.InvokeAsync(_Groups);
            NewGroupName = "";
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task RefreshAthletes()
    {
        try
        {
            var LoadedTeam = await factory.LoadTeam(TeamId);
            DropItems = LoadedTeam.Athletes.Select(ath => new AthleteGroupDropItem(ath, factory)).ToList();
            StateHasChanged();
            _container.Refresh();
        }
        catch
        {
            Snackbar.Add("Failed to refresh the athletes.", Severity.Error);
        }
    }

    private async Task ItemUpdated(MudItemDropInfo<AthleteGroupDropItem> dropItem)
    {
        try
        {
            await dropItem.Item!.SaveGroupChange(dropItem.DropzoneIdentifier);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
