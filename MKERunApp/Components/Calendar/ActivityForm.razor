@inject ISnackbar Snackbar

<MudForm @ref="form">
    <MudStack Spacing="1">
        <MudNumericField @bind-Value="ViewModel.MinutesForm"
                         T="int"
                         Label="Minutes"
                         Required
                         RequiredError="Minutes is required." />

        @foreach (var group in ViewModel.GetGroups)
        {
            <MudCheckBox T="bool"
                         Value="ViewModel.GetSelectedGroupsForm.Contains(group)"
                         ValueChanged="_ => ViewModel.ToggleSelectedGroup(group)"
                         Label="@group.Name"
                         Dense
                         Size="Size.Small"
                         Color="Color.Primary" />
        }

        <MudButton Color="Color.Primary"
                   OnClick="ClickSubmit"
                   Variant="Variant.Filled">
            Submit
        </MudButton>

        @if (Activity != null)
        {
            <MudButton Color=Color.Secondary
                       OnClick="ClickDelete"
                       Variant="Variant.Filled">
                Delete
            </MudButton>
        }
    </MudStack>
</MudForm>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public Activity? Activity { get; set; }
    [Parameter] public EventCallback<Activity?> ActivityChanged { get; set; }

    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }

    private MudForm? form;
    private bool IsValid;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Activity is not null)
        {
            ViewModel.MinutesForm = (int)Activity.DurationSeconds / 60;
            ViewModel.ResetSelectedGroups(Activity.Groups);
        }
    }

    private async Task ClickSubmit()
    {
        form?.Validate();
        if ((form?.IsValid ?? false) && ViewModel.GetSelectedGroupsForm.Count() > 0)
        {
            try
            {
                if (Activity != null)
                {
                    var loadedActivity = await ViewModel.UpdateActivity(Activity);
                    await ActivityChanged.InvokeAsync(loadedActivity);
                }
                else
                {
                    await ViewModel.AddNewActivity();
                }

                await ShowChanged.InvokeAsync(false);
            }
            catch
            {
                Snackbar.Add("Failed to save the activity", Severity.Error);
            }
        }
    }

    private async Task ClickDelete()
    {
        try
        {
            if (Activity != null)
                await ViewModel.DeleteActivity(Activity);
            else
                throw new NullReferenceException();
            Snackbar.Add("Successfuly deleted the activity.", Severity.Success);
            await ShowChanged.InvokeAsync(false);
            await ActivityChanged.InvokeAsync(null);
        }
        catch
        {
            Snackbar.Add("Failed to delete the activity.", Severity.Error);
        }
    }
}