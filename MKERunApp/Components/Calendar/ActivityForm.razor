@inject ISnackbar Snackbar

<style>
    .overlay {
        position: absolute;
        top: 0;
        right: 0;
        padding: 8px;
    }

    .bottom-activity-buttons {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }
</style>

<MudIconButton Icon="@Icons.Material.Filled.Close"
               Color="Color.Dark"
               OnClick="Close"
               Size="Size.Small"
               Class="overlay" />

<MudForm @ref="form" Class="pt-2">
    <MudStack Spacing="1">
        <MudStack Spacing="0">
            <MudNumericField @bind-Value="ViewModel.MinutesForm"
                             T="int"
                             Min="0"
                             Label="Minutes"
                             Required
                             Margin=Margin.Dense
                             RequiredError="Minutes is required." />

            <MudTextField @bind-Value="ViewModel.Description"
                          Label="Description"
                          AutoGrow
                          Margin=Margin.Dense />
        </MudStack>


        @foreach (var group in ViewModel.GetGroups)
        {
            <MudCheckBox T="bool"
                         Value="ViewModel.GetSelectedGroupsForm.Contains(group)"
                         ValueChanged="_ => ViewModel.ToggleSelectedGroup(group)"
                         Label="@group.Name"
                         Dense
                         Size="Size.Small"
                         Color="Color.Primary" />
        }

        <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.FlexEnd Spacing="0">
            @if (Activity != null)
            {
                <MudIconButton Color=Color.Secondary
                               Class="bottom-activity-buttons"
                               OnClick="ClickDelete"
                               Edge="Edge.Start"
                               DisableRipple
                               DisableElevation
                               Icon="@Icons.Material.Outlined.Delete" />
            }

            <MudIconButton Color="Color.Primary"
                           Class="bottom-activity-buttons"
                           Icon="@Icons.Material.Filled.Save"
                           Edge="Edge.Start"
                           DisableRipple
                           DisableElevation
                           OnClick="ClickSubmit" />
        </MudStack>
    </MudStack>
</MudForm>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public Activity? Activity { get; set; }
    [Parameter] public EventCallback<Activity?> ActivityChanged { get; set; }

    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }

    private MudForm? form;
    private bool IsValid;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Activity is not null)
        {
            ViewModel.MinutesForm = (int)Activity.DurationSeconds / 60;
            ViewModel.ResetSelectedGroups(Activity.Groups);
            ViewModel.Description = Activity.Description;
        }
    }

    private async Task ClickSubmit()
    {
        form?.Validate();
        if ((form?.IsValid ?? false) && ViewModel.GetSelectedGroupsForm.Count() > 0)
        {
            try
            {
                Activity? act = null;
                if (Activity != null)
                    act = await ViewModel.UpdateActivity(Activity.Id);
                else
                    act = await ViewModel.AddNewActivity();
                await ActivityChanged.InvokeAsync(act);
            }
            catch
            {
                Snackbar.Add("Failed to save the activity", Severity.Error);
            }
        }
    }

    private async Task ClickDelete()
    {
        try
        {
            if (Activity != null)
                await ViewModel.DeleteActivity(Activity);
            else
                throw new NullReferenceException();
            Snackbar.Add("Successfuly deleted the activity.", Severity.Success);
            await Close();
            await ActivityChanged.InvokeAsync(null);
        }
        catch
        {
            Snackbar.Add("Failed to delete the activity.", Severity.Error);
        }
    }

    private async Task Close()
    {
        await ShowChanged.InvokeAsync(false);
    }
}