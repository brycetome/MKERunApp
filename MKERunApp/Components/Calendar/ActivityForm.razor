@inject ISnackbar Snackbar
@using MKERunApp.Components.Coach
@inject IDbContextFactory<ApplicationDbContext> factory
@inject IJSRuntime JSRuntime

<style>
    .overlay {
        position: absolute;
        top: 0;
        right: 0;
        padding: 8px;
    }

    .mud-input-filled {
        border-radius: 0 !important;
    }

    .mud-input-label {
        color: rgb(255, 255, 255, 0.65) !important;
    }
</style>

<div style="position:absolute; top: @(offsetY)px; left: @(offsetX)px; black;">
    <MudPaper Style="@Width" Elevation="25">
        <div class="d-flex">

            <MudForm @ref="form" Style="@(FormModel.IsWorkOut ? "width: 450px;" : "width:300px;")" UserAttributes="@(new() {{"id", Activity?.Id}})">
                <MudStack Spacing="1" Class="pa-2">
                    <div draggable="true" @ondragend="OnDragEnd" @ondragstart="OnDragStart" style="cursor: move">
                        <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.SpaceBetween Spacing="0">
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                                <MudIcon Icon="@Icons.Material.Filled.DragIndicator" />
                                <MudText Class="pl-3"><b>@ViewModel.GetDay.ToShortDateString()</b></MudText>
                            </MudStack>

                            <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.SpaceBetween Spacing="0">
                                @if (Reports.Count() > 0)
                                {
                                    <MudBadge Content="Reports.Count()" Overlap Color="Color.Warning" OnClick="() => { OpenReports = !OpenReports; }" Class="cursor-pointer">
                                        <MudIconButton Color=Color.Info
                                                       OnClick="() => { OpenReports = !OpenReports; }"
                                                       Size="Size.Small"
                                                       Edge="Edge.Start"
                                                       DisableRipple
                                                       DisableElevation
                                                       Icon="@Icons.Material.Outlined.ModeComment" />
                                    </MudBadge>
                                }

                                <MudIconButton Icon="@Icons.Material.Filled.Close"
                                               Color="Color.Default"
                                               OnClick="Close"
                                               Size="Size.Small"
                                               Style="padding: 8px;" />

                            </MudStack>
                        </MudStack>
                    </div>

                    <MudDivider />

                    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">
                        <MudNumericField @bind-Value="FormModel.Minutes"
                                         T="int"
                                         Min="0"
                                         Label="Time"
                                         Required
                                         AdornmentText="min"
                                         Adornment="Adornment.End"
                                         Margin=Margin.Dense
                                         Variant="Variant.Filled"
                                         DisableUnderLine
                                         RequiredError="Minutes is required." />

                        <ActivitySelector @bind-ActivityType=FormModel.SelectedActivityType />
                    </MudStack>

                    <MudTextField @bind-Value="FormModel.Title"
                                  Label="Title"
                                  DisableUnderLine
                                  Variant="Variant.Filled"
                                  Margin=Margin.Dense />

                    <MudTextField @bind-Value="FormModel.Description"
                                  Label="Description"
                                  AutoGrow
                                  DisableUnderLine
                                  Variant="Variant.Filled"
                                  Margin=Margin.Dense />

                    <MudField Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              DisableUnderLine
                              Label="Groups">
                        <MudGrid Class="pa-2">
                            @foreach (var group in ViewModel.GetGroups)
                            {
                                <MudItem md="6" Style="padding:0;">
                                    <MudCheckBox T="bool"
                                                 Value="FormModel.GetSelectedGroups.Contains(group)"
                                                 ValueChanged="_ => FormModel.ToggleSelectedGroup(group)"
                                                 Label="@group.Name"
                                                 Dense
                                                 Size="Size.Small"
                                                 Color="Color.Primary" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudField>

                    @if (FormModel.IsWorkOut)
                    {
                        <MudTextField @bind-Value="FormModel.Recovery"
                                      Label="Recovery"
                                      AutoGrow
                                      DisableUnderLine
                                      Variant="Variant.Filled"
                                      Margin=Margin.Dense />

                        if (!FormModel.UseUIWorkOut)
                        {
                            <MudTextField @bind-Value="FormModel.WorkoutSpecs"
                                          Label="Workout Specs"
                                          AutoGrow
                                          DisableUnderLine
                                          Variant="Variant.Filled"
                                          Margin=Margin.Dense />
                        }
                        else
                        {
                            <MudField Variant="Variant.Filled"
                                      Margin="Margin.Dense"
                                      DisableUnderLine
                                      Label="Workout Specs">
                                <Workout @bind-WorkoutItems=FormModel.WorkoutItems />
                            </MudField>
                        }
                    }


                    <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.SpaceBetween Spacing="0">
                        <MudStack Row AlignItems="AlignItems.Center">
                            <MudSwitch @bind-Value=FormModel.IsWorkOut Label="Workout" Color="Color.Primary" Class="pl-3" />
                            @if (FormModel.IsWorkOut)
                            {
                                <MudSwitch @bind-Value=FormModel.UseUIWorkOut Label="Drag & Drop" Color="Color.Primary" />
                            }
                        </MudStack>


                        <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                            @if (Activity != null)
                            {
                                <MudIconButton Color=Color.Secondary
                                               Class="bottom-activity-buttons"
                                               OnClick="ClickDelete"
                                               Edge="Edge.Start"
                                               DisableRipple
                                               DisableElevation
                                               Icon="@Icons.Material.Outlined.Delete" />
                            }

                            <MudIconButton Color="Color.Primary"
                                           Class="bottom-activity-buttons"
                                           Icon="@Icons.Material.Filled.Save"
                                           Edge="Edge.Start"
                                           DisableRipple
                                           DisableElevation
                                           OnClick="ClickSubmit" />
                        </MudStack>
                    </MudStack>
                </MudStack>
            </MudForm>



            @if (Reports.Count() > 0 && OpenReports)
            {
                <MudDivider Vertical FlexItem Class="" />

                <MudStack Justify="Justify.FlexStart" Class="pa-2 rounded-r rounded-e overflow-y-scroll" Style="@($"height:{elementHeight}px; width:300px;background-color:rgba(0,0,0,0.1)")">
                    <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.FlexStart Spacing="0">
                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft"
                                       Color="Color.Default"
                                       OnClick="() => { OpenReports = false; }"
                                       Size="Size.Small"
                                       Style="padding: 8px;" />
                        <MudText>Splits & Notes</MudText>
                    </MudStack>

                    @foreach (var report in Reports)
                    {
                        <MudTextField Variant="Variant.Filled"
                                        ReadOnly
                                        AutoGrow
                                        FullWidth
                                        Value="@report.Notes"
                                        Margin="Margin.Dense"
                                        DisableUnderLine
                                        Label="@report.User.Email" />
                    }
                </MudStack>

            }
        </div>
    </MudPaper>
</div>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public Activity? Activity { get; set; }
    [Parameter] public EventCallback<Activity?> ActivityChanged { get; set; }

    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }


    private IEnumerable<AthleteActivityReport> Reports => Activity?.ActivityReports.Where(r => !string.IsNullOrEmpty(r.Notes)) ?? [];

    private ActivityFormModel FormModel = new();
    private MudForm? form;
    private bool IsValid;
    private bool OpenReports;
    private string Width
    {
        get
        {
            var width = 300;
            if (FormModel.IsWorkOut)
                width += 150;
            if (OpenReports)
                width += 300;

            return $"width: {width}px";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (Activity is not null)
        {
            FormModel = new(Activity);
            try
            {
                using var ctx = factory.CreateDbContext();
                ctx.Attach(Activity);
                await ctx.Entry(Activity).Collection(act => act.ActivityReports).Query()
                    .Include(r => r.User)
                    .LoadAsync();
                await ctx.DisposeAsync();
            }
            catch
            {
                Snackbar.Add("Failed to load comments.", Severity.Error);
            }
        }
    }


    int elementHeight;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Activity != null && Activity.Id != 0)
        {
            await InitializeElementHeightObserver();
        }
    }

    async Task InitializeElementHeightObserver()
    {
        // Call the JavaScript function to observe changes in element height
        await JSRuntime.InvokeVoidAsync("observeElementHeight", Activity?.Id ?? 0, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnElementHeightChanged(int newHeight)
    {
        if (!OpenReports)
        {
            elementHeight = newHeight;
            StateHasChanged();
        }
    }


    private double startX, startY, offsetX, offsetY;

    private void OnDragStart(DragEventArgs args)
    {
        startX = args.ClientX;
        startY = args.ClientY;
    }

    private void OnDragEnd(DragEventArgs args)
    {
        offsetX += args.ClientX - startX;
        offsetY += args.ClientY - startY;
    }

    private async Task ClickSubmit()
    {
        form?.Validate();
        if ((form?.IsValid ?? false) && FormModel != null && FormModel.GetSelectedGroups.Count() > 0)
        {
            try
            {
                if (Activity != null)
                    await ViewModel.UpdateActivity(Activity.Id, FormModel);
                else
                    await ViewModel.AddNewActivity(FormModel);
                await ActivityChanged.InvokeAsync(Activity);
                Snackbar.Add("Saved the activity", Severity.Success);
                await ShowChanged.InvokeAsync(false);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Failed to save the activity", Severity.Error);
            }
        }
    }

    private async Task ClickDelete()
    {
        try
        {
            if (Activity != null)
                await ViewModel.DeleteActivity(Activity);
            else
                throw new NullReferenceException();
            Snackbar.Add("Deleted the activity.", Severity.Success);
            await Close();
            await ActivityChanged.InvokeAsync(null);
        }
        catch
        {
            Snackbar.Add("Failed to delete the activity.", Severity.Error);
        }
    }

    private async Task Close()
    {
        await ShowChanged.InvokeAsync(false);
        startX = 0;
        startY = 0;
        FormModel.ResetForm();
    }
}