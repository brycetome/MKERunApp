@inject ISnackbar Snackbar

<style>
    .overlay {
        position: absolute;
        top: 0;
        right: 0;
        padding: 8px;
    }

    .bottom-activity-buttons {
        padding-top: 0 !important;
        padding-bottom: 0 !important;
    }

    .mud-input-filled {
        border-radius: 12px !important;
    }

    .mud-input-label {
        color: rgb(255, 255, 255, 0.65) !important;
    }
</style>


<MudForm @ref="form">
    <MudStack Spacing="2">
        <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.SpaceBetween Spacing="0">
            <MudText Class="pl-3"><b>@ViewModel.GetDay.ToShortDateString()</b></MudText>

            <MudIconButton Icon="@Icons.Material.Filled.Close"
                           Color="Color.Dark"
                           OnClick="Close"
                           Size="Size.Small" />
        </MudStack>


        <MudNumericField @bind-Value="FormModel.Minutes"
                         T="int"
                         Min="0"
                         Label="Time"
                         Required
                         AdornmentText="min"
                         Adornment="Adornment.End"
                         Margin=Margin.Dense
                         Variant="Variant.Filled"
                         DisableUnderLine
                         RequiredError="Minutes is required." />

        <MudTextField @bind-Value="FormModel.Description"
                      Label="Description"
                      AutoGrow
                      DisableUnderLine
                      Variant="Variant.Filled"
                      Margin=Margin.Dense />

        <MudSelect @bind-Value=FormModel.SelectedActivityType
                   Dense
                   Margin="Margin.Dense"
                   AdornmentIcon="@FormModel.SelectedActivityType?.Icon"
                   Label="Activity Type"
                   DisableUnderLine
                   Variant="Variant.Filled">
            @foreach (var ActivityType in ActivityType.GetActivityTypes())
            {
                <MudSelectItem Value="ActivityType" Icon="@ActivityType.Icon">
                    <MudStack Row AlignItems="AlignItems.Center" Spacing="0" Justify="Justify.SpaceBetween">
                        <MudText>@ActivityType.Name</MudText>
                        <MudIcon Icon="@ActivityType.Icon" />
                    </MudStack>
                </MudSelectItem>
            }
        </MudSelect>

        <MudField Variant="Variant.Filled"
                  Margin="Margin.Dense"
                  DisableUnderLine
                  Label="Groups">
            @foreach (var group in ViewModel.GetGroups)
            {
                <MudCheckBox T="bool"
                             Value="FormModel.GetSelectedGroups.Contains(group)"
                             ValueChanged="_ => FormModel.ToggleSelectedGroup(group)"
                             Label="@group.Name"
                             Dense
                             Size="Size.Small"
                             Color="Color.Primary" />
            }
        </MudField>


        <MudStack Row AlignItems="AlignItems.Center" Justify=Justify.SpaceBetween Spacing="0">
            <MudSwitch @bind-Value=FormModel.IsWorkOut Label="Workout" Color="Color.Primary" Class="pl-3" />


            <MudStack Row AlignItems="AlignItems.Center" Spacing="0">
                @if (Activity != null)
                {
                    <MudIconButton Color=Color.Secondary
                                   Class="bottom-activity-buttons"
                                   OnClick="ClickDelete"
                                   Edge="Edge.Start"
                                   DisableRipple
                                   DisableElevation
                                   Icon="@Icons.Material.Outlined.Delete" />
                }

                <MudIconButton Color="Color.Primary"
                               Class="bottom-activity-buttons"
                               Icon="@Icons.Material.Filled.Save"
                               Edge="Edge.Start"
                               DisableRipple
                               DisableElevation
                               OnClick="ClickSubmit" />
            </MudStack>
        </MudStack>
    </MudStack>
</MudForm>

@code {
    [Parameter] public bool Show { get; set; }
    [Parameter] public EventCallback<bool> ShowChanged { get; set; }
    [Parameter] public Activity? Activity { get; set; }
    [Parameter] public EventCallback<Activity?> ActivityChanged { get; set; }

    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }

    private ActivityFormModel FormModel = new();
    private MudForm? form;
    private bool IsValid;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (Activity is not null)
        {
            FormModel = new(Activity);
        }
    }

    private async Task ClickSubmit()
    {
        form?.Validate();
        if ((form?.IsValid ?? false) && FormModel != null && FormModel.GetSelectedGroups.Count() > 0)
        {
            try
            {
                Activity? act = null;
                if (Activity != null)
                    act = await ViewModel.UpdateActivity(Activity.Id, FormModel);
                else
                    act = await ViewModel.AddNewActivity(FormModel);
                await ActivityChanged.InvokeAsync(act);
                Snackbar.Add("Saved the activity", Severity.Success);
            }
            catch
            {
                Snackbar.Add("Failed to save the activity", Severity.Error);
            }
        }
    }

    private async Task ClickDelete()
    {
        try
        {
            if (Activity != null)
                await ViewModel.DeleteActivity(Activity);
            else
                throw new NullReferenceException();
            Snackbar.Add("Deleted the activity.", Severity.Success);
            await Close();
            await ActivityChanged.InvokeAsync(null);
        }
        catch
        {
            Snackbar.Add("Failed to delete the activity.", Severity.Error);
        }
    }

    private async Task Close()
    {
        await ShowChanged.InvokeAsync(false);
    }
}