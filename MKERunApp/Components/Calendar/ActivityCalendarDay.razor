
<MudBadge Visible="Activity?.ActivityReports.Where(r => !string.IsNullOrEmpty(r.Notes)).Any() ?? false" Content="Activity?.ActivityReports.Where(r => !string.IsNullOrEmpty(r.Notes)).Count()" Overlap Color="Color.Warning" Style="width:100% ">
    <MudChip OnClick="ClickedActivity" Style="@(ActivityColorBackground + "width:100%")" Icon="@Icon">
        <MudStack Row Justify="Justify.SpaceBetween" Style="width:100%">
            <MudText Typo="Typo.caption">
                @string.Join(", ", Activity.Groups.Select(g => g.Name))
            </MudText>
            <MudSpacer />
            <MudText Typo="Typo.caption">@($"{Activity?.DurationSeconds / 60}min")</MudText>
        </MudStack>
    </MudChip>
</MudBadge>


<MudPopover AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" Open=OpenActivity Fixed>
    <ActivityForm Show=OpenActivity
                  ShowChanged=ShowChanged
                  Activity=Activity
                  ActivityChanged="ActivityChanged"
                  ViewModel="ViewModel" />
</MudPopover>

@code {
    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }
    [Parameter][EditorRequired] public required Activity Activity { get; set; }
    [Parameter] public EventCallback<Activity> ActivityChanged { get; set; }
    private bool OpenActivity = false;

    private string ActivityColorBackground = "";
    private string Icon = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var actType = ActivityType.GetActivityType(Activity.WorkoutType);
        Icon = actType.Icon;
        ActivityColorBackground = actType.GetBackgroundColorCSS(Activity.IsWorkOut);
    }

    private void ClickedActivity()
    {
        OpenActivity = !OpenActivity;
    }

    private void ShowChanged()
    {
        OpenActivity = false;
        StateHasChanged();
    }
}
