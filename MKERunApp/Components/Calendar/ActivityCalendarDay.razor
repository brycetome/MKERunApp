<MudChip OnClick="ClickedActivity" Style="@ActivityColorBackground">
    <MudStack Row Justify="Justify.SpaceBetween" Style="width:100%">
        <MudText Typo="Typo.caption">
            @string.Join(", ", Activity.Groups.Select(g => g.Name))
        </MudText>
        <MudText Typo="Typo.caption">@($"{Activity.DurationSeconds / 60}min")</MudText>
    </MudStack>
</MudChip>

<MudPopover AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter" Open=OpenActivity Fixed>
    <ActivityForm Show=OpenActivity
                  ShowChanged=ShowChanged
                  Activity=Activity
                  ActivityChanged="ActivityChanged"
                  ViewModel="ViewModel" />
</MudPopover>

@code {
    [Parameter][EditorRequired] public required CalendarDayActivityViewModel ViewModel { get; set; }
    [Parameter][EditorRequired] public required Activity Activity { get; set; }
    [Parameter] public EventCallback<Activity> ActivityChanged { get; set; }
    private bool OpenActivity = false;

    private string ActivityColorBackground = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var actType = ActivityType.GetActivityType(Activity.WorkoutType);
        if (actType.Color == "" && !Activity.IsWorkOut)
            ActivityColorBackground = "";
        ActivityColorBackground = "background-color: ";
        if (Activity.IsWorkOut)
            ActivityColorBackground += "#c9a853;";
        else
            ActivityColorBackground += $"{actType.Color};";
    }

    private void ClickedActivity()
    {
        OpenActivity = !OpenActivity;
    }

    private void ShowChanged()
    {
        OpenActivity = false;
        StateHasChanged();
    }
}
