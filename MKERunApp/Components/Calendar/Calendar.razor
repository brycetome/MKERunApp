@inject IDbContextFactory<ApplicationDbContext> factory
@inject ISnackbar Snackbar

@if(SelectedTeam != null)
{
    <MudStack>
    <MudPaper>
        <MudToolBar WrapContent Dense DisableGutters>
            @foreach (var actType in ActivityType.GetActivityTypes().OrderBy(act => act.Order))
            {
                <style>
                    @($"#chip-{actType.Type} .mud-icon-root {{ color: {actType.Color} !important;{"}"}")
                </style>
                <div class="mx-1" @onclick="() => ToggleWorkoutTypeSelection(actType.Type)" style="cursor:pointer;" id="@($"chip-{actType.Type}")">
                    <MudChip Icon="@actType.Icon"
                             Text="@actType.Name"
                             Disabled="!SelectedWorkoutTypes.Contains(actType.Type)"
                             Style="" />
                </div>
            }
        </MudToolBar>
    </MudPaper>

    <MudPaper>
        <MudStack Row AlignItems="AlignItems.Center" Class="pa-4">
            <MudIconButton OnClick="() => { monthsAway--; CreateMonth(); }"
                           Icon="@Icons.Material.Filled.NavigateBefore"
                           Size="Size.Small"
                           Color="Color.Primary" />

            <MudIconButton OnClick="() => { monthsAway++; CreateMonth(); }"
                           Icon="@Icons.Material.Filled.NavigateNext"
                           Size="Size.Small"
                           Color="Color.Primary" />

            <MudText><b>@monthStart.ToString("MMMM") @monthStart.ToString("yyyy")</b></MudText>
        </MudStack>

        <section class="section-display px-4 pb-4">
            @foreach (var weekday in GetDaysOfWeek())
            {
                <MudText Class="py-2" Align="Align.Center">@weekday</MudText>
            }
            @for (int i = 0; i < emptyDaysFromPastMonth; i++)
            {
                <div />
            }
            @for (int i = 1; i <= monthEnd.Day; i++)
            {
                var dayDate = new DateTime(monthStart.Year, monthStart.Month, i);


                <div class="calendar-box mud-background">
                    <CalendarDay ViewModel="new CalendarDayActivityViewModel(SelectedTeam.Groups, dayDate, factory)" SelectedWorkoutTypes="SelectedWorkoutTypes" />
                </div>
            }
        </section>
    </MudPaper>
</MudStack>
}


@code {
    [Parameter] public IEnumerable<TeamGroup> Groups { get; set; } = [];

    private List<ActivityType.WorkoutType> SelectedWorkoutTypes = ((ActivityType.WorkoutType[])Enum.GetValues(typeof(ActivityType.WorkoutType))).ToList();


    private Team? SelectedTeam;
    DateTime monthStart;
    DateTime monthEnd;
    int monthsAway = 0;
    int emptyDaysFromPastMonth = 0;

    protected override void OnInitialized()
    {
        CreateMonth();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        try
        {
            SelectedTeam = null;
            if (Groups.First() is TeamGroup g)
                SelectedTeam = await factory.LoadTeam(g.TeamId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public static List<string> GetDaysOfWeek()
    {
        List<string> daysOfWeek = new List<string>();
        for (int i = 0; i < 7; i++)
        {
            // Adjust the index to start from Monday
            int adjustedIndex = (i + 1) % 7;
            daysOfWeek.Add(((DayOfWeek)adjustedIndex).ToString());
        }
        return daysOfWeek;
    }

    private void CreateMonth()
    {
        var tempDate = DateTime.Now.AddMonths(monthsAway);

        monthStart = new DateTime(tempDate.Year, tempDate.Month, 1);
        monthEnd = monthStart.AddMonths(1).AddDays(-1);

        emptyDaysFromPastMonth = (int)monthStart.DayOfWeek - 1; // -1 for monday start of week
    }

    private void ToggleWorkoutTypeSelection(ActivityType.WorkoutType workoutType)
    {
        if (SelectedWorkoutTypes.Contains(workoutType))
            SelectedWorkoutTypes.Remove(workoutType);
        else
            SelectedWorkoutTypes.Add(workoutType);
    }
}