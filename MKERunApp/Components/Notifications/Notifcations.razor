@using Models.ViewModels.Notifications

@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> factory

<MudStack>
    @if (NotifcationsList.Count == 0)
    {
        <MudText>No notifications</MudText>
    }
    else
    {
        foreach (var notification in NotifcationsList)
        {
            <MudText>@notification.Title</MudText>
            <MudText>@notification.Description</MudText>
            <MudStack Row AlignItems="AlignItems.Center">
                <MudButton OnClick="() => Action(notification)">@notification.ActionTitle</MudButton>
                <MudButton OnClick="() => ClearNotifcation(notification)">@notification.ClearTitle</MudButton>
            </MudStack>
            <MudDivider />
        }
    }
</MudStack>



@code {
    [Parameter] public bool IsShowing { get; set; }
    [Parameter] public EventCallback<bool> IsShowingChanged { get; set; }

    private List<AbstractNotification> NotifcationsList = [];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = UserManager.GetUserId(user) ?? throw new NullReferenceException();
            NotifcationsList = await factory.GetNotificationsForUser(userId);
        }
        catch
        {
            Snackbar.Add("Failed to load notifications.", Severity.Error);
        }
    }

    private async Task Action(AbstractNotification notification)
    {
        try
        {
            await notification.NotificationAction();
            RemoveNotification(notification);
            Snackbar.Add(notification.ActionSuccessMessage, Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task ClearNotifcation(AbstractNotification notification)
    {
        try
        {
            await notification.ClearNotification();
            RemoveNotification(notification);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void RemoveNotification(AbstractNotification notification)
    {
        NotifcationsList.Remove(notification);
    }
}
